-- ************************************ CREATE TABLES ********************************* --
-- Creating Artists Table
CREATE TABLE Artists (
    ArtistID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    Country VARCHAR2(50)
);


-- Creating Albums Table
CREATE TABLE Albums (
    AlbumID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Title VARCHAR2(100) NOT NULL,
    ArtistID NUMBER,
    ReleaseDate DATE,
    CONSTRAINT fk_Artist FOREIGN KEY (ArtistID) REFERENCES Artists(ArtistID)
);


-- Creating Genres Table
CREATE TABLE Genres (
    GenreID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    GenreName VARCHAR2(50) NOT NULL
);

-- Creating Tracks Table
CREATE TABLE Tracks (
    TrackID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Title VARCHAR2(100) NOT NULL,
    AlbumID NUMBER,
    GenreID NUMBER,
    TLength INTERVAL DAY TO SECOND,
    CONSTRAINT fk_Album FOREIGN KEY (AlbumID) REFERENCES Albums(AlbumID),
    CONSTRAINT fk_Genre FOREIGN KEY (GenreID) REFERENCES Genres(GenreID)
);


-- Creating Customers Table
CREATE TABLE Customers (
    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    PhoneNumber VARCHAR2(20)
);


-- Creating Orders Table
CREATE TABLE Orders (
    OrderID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER,
    OrderDate DATE,
    CONSTRAINT fk_Customer FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);


-- Creating OrderDetails Table
CREATE TABLE OrderDetails (
    OrderDetailID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OrderID NUMBER,
    TrackID NUMBER,
    Quantity NUMBER,
    Price NUMBER(10, 2),
    CONSTRAINT fk_Order FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    CONSTRAINT fk_Track FOREIGN KEY (TrackID) REFERENCES Tracks(TrackID)
);

-- Creating Playlists Table
CREATE TABLE Playlists (
    PlaylistID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    CustomerID NUMBER,
    CONSTRAINT fk_PlaylistCustomer FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Creating PlaylistTracks Table
CREATE TABLE PlaylistTracks (
    PlaylistTrackID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PlaylistID NUMBER,
    TrackID NUMBER,
    CONSTRAINT fk_Playlist FOREIGN KEY (PlaylistID) REFERENCES Playlists(PlaylistID),
    CONSTRAINT fk_TrackPlaylist FOREIGN KEY (TrackID) REFERENCES Tracks(TrackID)
);


-- Creating Suppliers Table
CREATE TABLE Suppliers (
    SupplierID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    ContactName VARCHAR2(100),
    ContactEmail VARCHAR2(100)
);

-- Creating Inventory Table
CREATE TABLE Inventory (
    InventoryID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AlbumID NUMBER,
    SupplierID NUMBER,
    Quantity NUMBER,
    CONSTRAINT fk_InventoryAlbum FOREIGN KEY (AlbumID) REFERENCES Albums(AlbumID),
    CONSTRAINT fk_InventorySupplier FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID)
);

-- ************************************ INSERT DATA ********************************* --
-- Insert Data into Artists

INSERT ALL
    INTO Artists (ArtistID, Name, Country) VALUES (1, 'The Beatles', 'UK')
    INTO Artists (ArtistID, Name, Country) VALUES (2, 'Taylor Swift', 'USA')
    INTO Artists (ArtistID, Name, Country) VALUES (3, 'Coldplay', 'UK')
SELECT * FROM dual;

--Insert Data into Albums
INSERT ALL
    INTO Albums (AlbumID, Title, ArtistID, ReleaseDate) VALUES (1, 'Abbey Road', 1, TO_DATE('1969-09-26', 'YYYY-MM-DD'))
    INTO Albums (AlbumID, Title, ArtistID, ReleaseDate) VALUES (2, '1989', 2, TO_DATE('2014-10-27', 'YYYY-MM-DD'))
    INTO Albums (AlbumID, Title, ArtistID, ReleaseDate) VALUES (3, 'Parachutes', 3, TO_DATE('2000-07-10', 'YYYY-MM-DD'))
SELECT * FROM dual;

--Insert Data into Genres

INSERT ALL
    INTO Genres (GenreID, GenreName) VALUES (1, 'Rock')
    INTO Genres (GenreID, GenreName) VALUES (2, 'Pop')
    INTO Genres (GenreID, GenreName) VALUES (3, 'Alternative')
SELECT * FROM dual;

--Insert Data into Tracks

INSERT ALL
    INTO Tracks (TrackID, Title, AlbumID, GenreID, TLength) VALUES (1, 'Come Together', 1, 1, INTERVAL '0 00:04:19' DAY TO SECOND)
    INTO Tracks (TrackID, Title, AlbumID, GenreID, TLength) VALUES (2, 'Blank Space', 2, 2, INTERVAL '0 00:03:51' DAY TO SECOND)
    INTO Tracks (TrackID, Title, AlbumID, GenreID, TLength) VALUES (3, 'Yellow', 3, 3, INTERVAL '0 00:04:26' DAY TO SECOND)
SELECT * FROM dual;

--Insert Data into Customers

INSERT ALL
    INTO Customers (CustomerID, FirstName, LastName, Email, PhoneNumber) VALUES (1, 'John', 'Doe', 'john.doe@example.com', '123-456-7890')
    INTO Customers (CustomerID, FirstName, LastName, Email, PhoneNumber) VALUES (2, 'Jane', 'Smith', 'jane.smith@example.com', '098-765-4321')
SELECT * FROM dual;

--Insert Data into Orders

INSERT ALL
    INTO Orders (OrderID, CustomerID, OrderDate) VALUES (1, 1, TO_DATE('2024-06-30', 'YYYY-MM-DD'))
    INTO Orders (OrderID, CustomerID, OrderDate) VALUES (2, 2, TO_DATE('2024-07-01', 'YYYY-MM-DD'))
SELECT * FROM dual;

--Insert Data into OrderDetails

INSERT ALL
    INTO OrderDetails (OrderDetailID, OrderID, TrackID, Quantity, Price) VALUES (1, 1, 1, 1, 1.29)
    INTO OrderDetails (OrderDetailID, OrderID, TrackID, Quantity, Price) VALUES (2, 1, 2, 1, 1.29)
    INTO OrderDetails (OrderDetailID, OrderID, TrackID, Quantity, Price) VALUES (3, 2, 3, 1, 1.29)
SELECT * FROM dual;

--Insert Data into Playlists

INSERT ALL
    INTO Playlists (PlaylistID, Name, CustomerID) VALUES (1, 'Rock Classics', 1)
    INTO Playlists (PlaylistID, Name, CustomerID) VALUES (2, 'Pop Hits', 2)
SELECT * FROM dual;

--Insert Data into PlaylistTracks

INSERT ALL
    INTO PlaylistTracks (PlaylistTrackID, PlaylistID, TrackID) VALUES (1, 1, 1)
    INTO PlaylistTracks (PlaylistTrackID, PlaylistID, TrackID) VALUES (2, 1, 3)
    INTO PlaylistTracks (PlaylistTrackID, PlaylistID, TrackID) VALUES (3, 2, 2)
SELECT * FROM dual;

--Insert Data into Suppliers

INSERT ALL
    INTO Suppliers (SupplierID, Name, ContactName, ContactEmail) VALUES (1, 'Universal Music', 'Alice Johnson', 'alice.j@universal.com')
    INTO Suppliers (SupplierID, Name, ContactName, ContactEmail) VALUES (2, 'Sony Music', 'Bob Smith', 'bob.s@sonymusic.com')
SELECT * FROM dual;

--Insert Data into Inventory

INSERT ALL
    INTO Inventory (InventoryID, AlbumID, SupplierID, Quantity) VALUES (1, 1, 1, 100)
    INTO Inventory (InventoryID, AlbumID, SupplierID, Quantity) VALUES (2, 2, 2, 200)
    INTO Inventory (InventoryID, AlbumID, SupplierID, Quantity) VALUES (3, 3, 1, 150)
SELECT * FROM dual;


-- *********************** BASIC QUERIES ************************** --

--Query 1: List All Albums with Artist Names

SELECT
    al.title,
    al.releasedate,
    ar.name
FROM
    albums al
    INNER JOIN artists ar ON al.artistid = ar.artistid
;    
    
--Query 2: List All Tracks with Album and Genre

SELECT 
    t.Title AS TrackTitle, 
    al.Title AS AlbumTitle, 
    g.GenreName, 
    t.tlength
FROM Tracks t
    INNER JOIN Albums al ON t.AlbumID = al.AlbumID
    INNER JOIN Genres g ON t.GenreID = g.GenreID
;
    
--Query 3: List All Orders with Customer Names and Order Details

SELECT 
    o.OrderID, 
    c.FirstName, 
    c.LastName, 
    o.OrderDate, 
    t.Title AS TrackTitle, 
    od.Quantity, 
    od.Price
FROM Orders o
    INNER JOIN Customers c ON o.CustomerID = c.CustomerID
    INNER JOIN OrderDetails od ON o.OrderID = od.OrderID
    INNER JOIN Tracks t ON od.TrackID = t.TrackID
;

--Query 4: Query 4: Total Sales per Customer

SELECT 
    c.customerid,
    c.firstname,
    c.lastname,
    SUM(od.quantity * od.price) AS TotalSpent
FROM 
    OrderDetails od
    INNER JOIN orders o ON od.orderid = o.orderid
    INNER JOIN customers c ON o.customerid = c.customerid
GROUP BY
    c.customerid,
    c.firstname,
    c.lastname
;

--Query 5: Most Popular Genres

SELECT
    g.genrename,
    COUNT(g.genrename) AS TrackCount
FROM 
    OrderDetails od
    INNER JOIN tracks t ON od.trackid = t.trackid
    INNER JOIN genres g ON t.genreid = g.genreid
GROUP BY
    g.genrename
ORDER BY  
    TrackCount DESC
;

-- *********************** MODERATE QUERIES ************************** --

--Query 1: List All Playlists with Track Names

SELECT
    pt.playlisttrackid,
    p.name,
    t.title,
    t.tlength
FROM 
    playlisttracks pt
    INNER JOIN playlists p ON pt.playlistid = p.playlistid
    INNER JOIN tracks t ON pt.trackid = t.trackid
;

--Query 2: Inventory Status

SELECT 
    a.Title AS AlbumTitle, 
    s.Name AS SupplierName, 
    i.Quantity
FROM 
    Inventory i
    INNER JOIN Albums a ON i.AlbumID = a.AlbumID
    INNER JOIN Suppliers s ON i.SupplierID = s.SupplierID
;

--Query 3: Orders with Detailed Customer Information

SELECT 
    o.OrderID, 
    c.FirstName, 
    c.LastName, 
    c.Email, 
    c.PhoneNumber, 
    o.OrderDate, 
    t.Title AS TrackTitle, 
    od.Quantity, 
    od.Price
FROM 
    Orders o
    INNER JOIN Customers c ON o.CustomerID = c.CustomerID
    INNER JOIN OrderDetails od ON o.OrderID = od.OrderID
    INNER JOIN Tracks t ON od.TrackID = t.TrackID
;

--Query 4: Total Sales by Supplier

SELECT 
    s.Name AS SupplierName, 
    SUM(od.Quantity * od.Price) AS TotalSales
FROM 
    Suppliers s
    INNER JOIN Inventory i ON s.SupplierID = i.SupplierID
    INNER JOIN Albums a ON i.AlbumID = a.AlbumID
    INNER JOIN Tracks t ON a.AlbumID = t.AlbumID
    INNER JOIN OrderDetails od ON t.TrackID = od.TrackID
GROUP BY 
    s.Name
;

--Query 5: Most Popular Albums

SELECT
    a.title AS AlbumTitle,
    ar.name AS ArtistName,
    count(od.orderdetailid) AS SalesCount
FROM
    orderdetails od
    INNER JOIN tracks t ON od.trackid = t.trackid
    INNER JOIN albums a ON t.albumid = a.albumid
    INNER JOIN artists ar ON a.artistid = ar.artistid
GROUP BY
    a.title,
    ar.name
;

--Query 6: Customer Playlists and Their Tracks

SELECT 
    c.FirstName, 
    c.LastName, 
    p.Name AS PlaylistName, 
    t.Title AS TrackTitle
FROM
    playlisttracks pt
    INNER JOIN playlists p ON pt.playlistid = p.playlistid
    INNER JOIN customers c ON p.customerid = c.customerid
    INNER JOIN tracks t ON pt.trackid = t.trackid
;
